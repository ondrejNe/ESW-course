// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scheme.proto

#include "scheme.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace esw {
PROTOBUF_CONSTEXPR Request::Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestDefaultTypeInternal() {}
  union {
    Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestDefaultTypeInternal _Request_default_instance_;
PROTOBUF_CONSTEXPR Walk::Walk(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.locations_)*/{}
  , /*decltype(_impl_.lengths_)*/{}
  , /*decltype(_impl_._lengths_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WalkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WalkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WalkDefaultTypeInternal() {}
  union {
    Walk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WalkDefaultTypeInternal _Walk_default_instance_;
PROTOBUF_CONSTEXPR OneToOne::OneToOne(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.origin_)*/nullptr
  , /*decltype(_impl_.destination_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OneToOneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OneToOneDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OneToOneDefaultTypeInternal() {}
  union {
    OneToOne _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OneToOneDefaultTypeInternal _OneToOne_default_instance_;
PROTOBUF_CONSTEXPR OneToAll::OneToAll(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.origin_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OneToAllDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OneToAllDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OneToAllDefaultTypeInternal() {}
  union {
    OneToAll _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OneToAllDefaultTypeInternal _OneToAll_default_instance_;
PROTOBUF_CONSTEXPR Reset::Reset(
    ::_pbi::ConstantInitialized) {}
struct ResetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResetDefaultTypeInternal() {}
  union {
    Reset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResetDefaultTypeInternal _Reset_default_instance_;
PROTOBUF_CONSTEXPR Location::Location(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocationDefaultTypeInternal() {}
  union {
    Location _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocationDefaultTypeInternal _Location_default_instance_;
PROTOBUF_CONSTEXPR Response::Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.errmsg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.shortest_path_length_)*/uint64_t{0u}
  , /*decltype(_impl_.total_length_)*/uint64_t{0u}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseDefaultTypeInternal() {}
  union {
    Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace esw
static ::_pb::Metadata file_level_metadata_scheme_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_scheme_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_scheme_2eproto = nullptr;

const uint32_t TableStruct_scheme_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::esw::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::esw::Request, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::esw::Request, _impl_.msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::esw::Walk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::esw::Walk, _impl_.locations_),
  PROTOBUF_FIELD_OFFSET(::esw::Walk, _impl_.lengths_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::esw::OneToOne, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::esw::OneToOne, _impl_.origin_),
  PROTOBUF_FIELD_OFFSET(::esw::OneToOne, _impl_.destination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::esw::OneToAll, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::esw::OneToAll, _impl_.origin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::esw::Reset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::esw::Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::esw::Location, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::esw::Location, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::esw::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::esw::Response, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::esw::Response, _impl_.errmsg_),
  PROTOBUF_FIELD_OFFSET(::esw::Response, _impl_.shortest_path_length_),
  PROTOBUF_FIELD_OFFSET(::esw::Response, _impl_.total_length_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::esw::Request)},
  { 11, -1, -1, sizeof(::esw::Walk)},
  { 19, -1, -1, sizeof(::esw::OneToOne)},
  { 27, -1, -1, sizeof(::esw::OneToAll)},
  { 34, -1, -1, sizeof(::esw::Reset)},
  { 40, -1, -1, sizeof(::esw::Location)},
  { 48, -1, -1, sizeof(::esw::Response)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::esw::_Request_default_instance_._instance,
  &::esw::_Walk_default_instance_._instance,
  &::esw::_OneToOne_default_instance_._instance,
  &::esw::_OneToAll_default_instance_._instance,
  &::esw::_Reset_default_instance_._instance,
  &::esw::_Location_default_instance_._instance,
  &::esw::_Response_default_instance_._instance,
};

const char descriptor_table_protodef_scheme_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014scheme.proto\022\003esw\"\216\001\n\007Request\022\031\n\004walk\030"
  "\001 \001(\0132\t.esw.WalkH\000\022!\n\010oneToOne\030\002 \001(\0132\r.e"
  "sw.OneToOneH\000\022!\n\010oneToAll\030\003 \001(\0132\r.esw.On"
  "eToAllH\000\022\033\n\005reset\030\004 \001(\0132\n.esw.ResetH\000B\005\n"
  "\003msg\"9\n\004Walk\022 \n\tlocations\030\001 \003(\0132\r.esw.Lo"
  "cation\022\017\n\007lengths\030\002 \003(\r\"M\n\010OneToOne\022\035\n\006o"
  "rigin\030\001 \001(\0132\r.esw.Location\022\"\n\013destinatio"
  "n\030\002 \001(\0132\r.esw.Location\")\n\010OneToAll\022\035\n\006or"
  "igin\030\001 \001(\0132\r.esw.Location\"\007\n\005Reset\" \n\010Lo"
  "cation\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\"\221\001\n\010Respons"
  "e\022$\n\006status\030\001 \001(\0162\024.esw.Response.Status\022"
  "\016\n\006errMsg\030\002 \001(\t\022\034\n\024shortest_path_length\030"
  "\003 \001(\004\022\024\n\014total_length\030\004 \001(\004\"\033\n\006Status\022\006\n"
  "\002OK\020\000\022\t\n\005ERROR\020\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_scheme_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_scheme_2eproto = {
    false, false, 544, descriptor_table_protodef_scheme_2eproto,
    "scheme.proto",
    &descriptor_table_scheme_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_scheme_2eproto::offsets,
    file_level_metadata_scheme_2eproto, file_level_enum_descriptors_scheme_2eproto,
    file_level_service_descriptors_scheme_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_scheme_2eproto_getter() {
  return &descriptor_table_scheme_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_scheme_2eproto(&descriptor_table_scheme_2eproto);
namespace esw {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Response_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scheme_2eproto);
  return file_level_enum_descriptors_scheme_2eproto[0];
}
bool Response_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Response_Status Response::OK;
constexpr Response_Status Response::ERROR;
constexpr Response_Status Response::Status_MIN;
constexpr Response_Status Response::Status_MAX;
constexpr int Response::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Request::_Internal {
 public:
  static const ::esw::Walk& walk(const Request* msg);
  static const ::esw::OneToOne& onetoone(const Request* msg);
  static const ::esw::OneToAll& onetoall(const Request* msg);
  static const ::esw::Reset& reset(const Request* msg);
};

const ::esw::Walk&
Request::_Internal::walk(const Request* msg) {
  return *msg->_impl_.msg_.walk_;
}
const ::esw::OneToOne&
Request::_Internal::onetoone(const Request* msg) {
  return *msg->_impl_.msg_.onetoone_;
}
const ::esw::OneToAll&
Request::_Internal::onetoall(const Request* msg) {
  return *msg->_impl_.msg_.onetoall_;
}
const ::esw::Reset&
Request::_Internal::reset(const Request* msg) {
  return *msg->_impl_.msg_.reset_;
}
void Request::set_allocated_walk(::esw::Walk* walk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (walk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(walk);
    if (message_arena != submessage_arena) {
      walk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, walk, submessage_arena);
    }
    set_has_walk();
    _impl_.msg_.walk_ = walk;
  }
  // @@protoc_insertion_point(field_set_allocated:esw.Request.walk)
}
void Request::set_allocated_onetoone(::esw::OneToOne* onetoone) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (onetoone) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(onetoone);
    if (message_arena != submessage_arena) {
      onetoone = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onetoone, submessage_arena);
    }
    set_has_onetoone();
    _impl_.msg_.onetoone_ = onetoone;
  }
  // @@protoc_insertion_point(field_set_allocated:esw.Request.oneToOne)
}
void Request::set_allocated_onetoall(::esw::OneToAll* onetoall) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (onetoall) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(onetoall);
    if (message_arena != submessage_arena) {
      onetoall = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onetoall, submessage_arena);
    }
    set_has_onetoall();
    _impl_.msg_.onetoall_ = onetoall;
  }
  // @@protoc_insertion_point(field_set_allocated:esw.Request.oneToAll)
}
void Request::set_allocated_reset(::esw::Reset* reset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (reset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(reset);
    if (message_arena != submessage_arena) {
      reset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reset, submessage_arena);
    }
    set_has_reset();
    _impl_.msg_.reset_ = reset;
  }
  // @@protoc_insertion_point(field_set_allocated:esw.Request.reset)
}
Request::Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:esw.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_msg();
  switch (from.msg_case()) {
    case kWalk: {
      _this->_internal_mutable_walk()->::esw::Walk::MergeFrom(
          from._internal_walk());
      break;
    }
    case kOneToOne: {
      _this->_internal_mutable_onetoone()->::esw::OneToOne::MergeFrom(
          from._internal_onetoone());
      break;
    }
    case kOneToAll: {
      _this->_internal_mutable_onetoall()->::esw::OneToAll::MergeFrom(
          from._internal_onetoall());
      break;
    }
    case kReset: {
      _this->_internal_mutable_reset()->::esw::Reset::MergeFrom(
          from._internal_reset());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:esw.Request)
}

inline void Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_msg();
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:esw.Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_msg()) {
    clear_msg();
  }
}

void Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Request::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:esw.Request)
  switch (msg_case()) {
    case kWalk: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.walk_;
      }
      break;
    }
    case kOneToOne: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.onetoone_;
      }
      break;
    }
    case kOneToAll: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.onetoall_;
      }
      break;
    }
    case kReset: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.reset_;
      }
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MSG_NOT_SET;
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:esw.Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_msg();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .esw.Walk walk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_walk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .esw.OneToOne oneToOne = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_onetoone(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .esw.OneToAll oneToAll = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_onetoall(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .esw.Reset reset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_reset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esw.Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .esw.Walk walk = 1;
  if (_internal_has_walk()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::walk(this),
        _Internal::walk(this).GetCachedSize(), target, stream);
  }

  // .esw.OneToOne oneToOne = 2;
  if (_internal_has_onetoone()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::onetoone(this),
        _Internal::onetoone(this).GetCachedSize(), target, stream);
  }

  // .esw.OneToAll oneToAll = 3;
  if (_internal_has_onetoall()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::onetoall(this),
        _Internal::onetoall(this).GetCachedSize(), target, stream);
  }

  // .esw.Reset reset = 4;
  if (_internal_has_reset()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::reset(this),
        _Internal::reset(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esw.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esw.Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (msg_case()) {
    // .esw.Walk walk = 1;
    case kWalk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.walk_);
      break;
    }
    // .esw.OneToOne oneToOne = 2;
    case kOneToOne: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.onetoone_);
      break;
    }
    // .esw.OneToAll oneToAll = 3;
    case kOneToAll: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.onetoall_);
      break;
    }
    // .esw.Reset reset = 4;
    case kReset: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.reset_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Request::GetClassData() const { return &_class_data_; }


void Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Request*>(&to_msg);
  auto& from = static_cast<const Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:esw.Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.msg_case()) {
    case kWalk: {
      _this->_internal_mutable_walk()->::esw::Walk::MergeFrom(
          from._internal_walk());
      break;
    }
    case kOneToOne: {
      _this->_internal_mutable_onetoone()->::esw::OneToOne::MergeFrom(
          from._internal_onetoone());
      break;
    }
    case kOneToAll: {
      _this->_internal_mutable_onetoall()->::esw::OneToAll::MergeFrom(
          from._internal_onetoall());
      break;
    }
    case kReset: {
      _this->_internal_mutable_reset()->::esw::Reset::MergeFrom(
          from._internal_reset());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esw.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.msg_, other->_impl_.msg_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_scheme_2eproto_getter, &descriptor_table_scheme_2eproto_once,
      file_level_metadata_scheme_2eproto[0]);
}

// ===================================================================

class Walk::_Internal {
 public:
};

Walk::Walk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:esw.Walk)
}
Walk::Walk(const Walk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Walk* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.locations_){from._impl_.locations_}
    , decltype(_impl_.lengths_){from._impl_.lengths_}
    , /*decltype(_impl_._lengths_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:esw.Walk)
}

inline void Walk::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.locations_){arena}
    , decltype(_impl_.lengths_){arena}
    , /*decltype(_impl_._lengths_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Walk::~Walk() {
  // @@protoc_insertion_point(destructor:esw.Walk)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Walk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.locations_.~RepeatedPtrField();
  _impl_.lengths_.~RepeatedField();
}

void Walk::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Walk::Clear() {
// @@protoc_insertion_point(message_clear_start:esw.Walk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.locations_.Clear();
  _impl_.lengths_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Walk::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .esw.Location locations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_locations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 lengths = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_lengths(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_lengths(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Walk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esw.Walk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .esw.Location locations = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_locations_size()); i < n; i++) {
    const auto& repfield = this->_internal_locations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 lengths = 2;
  {
    int byte_size = _impl_._lengths_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_lengths(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esw.Walk)
  return target;
}

size_t Walk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esw.Walk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .esw.Location locations = 1;
  total_size += 1UL * this->_internal_locations_size();
  for (const auto& msg : this->_impl_.locations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 lengths = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.lengths_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._lengths_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Walk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Walk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Walk::GetClassData() const { return &_class_data_; }


void Walk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Walk*>(&to_msg);
  auto& from = static_cast<const Walk&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:esw.Walk)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.locations_.MergeFrom(from._impl_.locations_);
  _this->_impl_.lengths_.MergeFrom(from._impl_.lengths_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Walk::CopyFrom(const Walk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esw.Walk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Walk::IsInitialized() const {
  return true;
}

void Walk::InternalSwap(Walk* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.locations_.InternalSwap(&other->_impl_.locations_);
  _impl_.lengths_.InternalSwap(&other->_impl_.lengths_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Walk::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_scheme_2eproto_getter, &descriptor_table_scheme_2eproto_once,
      file_level_metadata_scheme_2eproto[1]);
}

// ===================================================================

class OneToOne::_Internal {
 public:
  static const ::esw::Location& origin(const OneToOne* msg);
  static const ::esw::Location& destination(const OneToOne* msg);
};

const ::esw::Location&
OneToOne::_Internal::origin(const OneToOne* msg) {
  return *msg->_impl_.origin_;
}
const ::esw::Location&
OneToOne::_Internal::destination(const OneToOne* msg) {
  return *msg->_impl_.destination_;
}
OneToOne::OneToOne(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:esw.OneToOne)
}
OneToOne::OneToOne(const OneToOne& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OneToOne* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.origin_){nullptr}
    , decltype(_impl_.destination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_origin()) {
    _this->_impl_.origin_ = new ::esw::Location(*from._impl_.origin_);
  }
  if (from._internal_has_destination()) {
    _this->_impl_.destination_ = new ::esw::Location(*from._impl_.destination_);
  }
  // @@protoc_insertion_point(copy_constructor:esw.OneToOne)
}

inline void OneToOne::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.origin_){nullptr}
    , decltype(_impl_.destination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OneToOne::~OneToOne() {
  // @@protoc_insertion_point(destructor:esw.OneToOne)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OneToOne::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.origin_;
  if (this != internal_default_instance()) delete _impl_.destination_;
}

void OneToOne::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OneToOne::Clear() {
// @@protoc_insertion_point(message_clear_start:esw.OneToOne)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.origin_ != nullptr) {
    delete _impl_.origin_;
  }
  _impl_.origin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.destination_ != nullptr) {
    delete _impl_.destination_;
  }
  _impl_.destination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OneToOne::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .esw.Location origin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .esw.Location destination = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_destination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OneToOne::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esw.OneToOne)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .esw.Location origin = 1;
  if (this->_internal_has_origin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::origin(this),
        _Internal::origin(this).GetCachedSize(), target, stream);
  }

  // .esw.Location destination = 2;
  if (this->_internal_has_destination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::destination(this),
        _Internal::destination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esw.OneToOne)
  return target;
}

size_t OneToOne::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esw.OneToOne)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .esw.Location origin = 1;
  if (this->_internal_has_origin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.origin_);
  }

  // .esw.Location destination = 2;
  if (this->_internal_has_destination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.destination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OneToOne::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OneToOne::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OneToOne::GetClassData() const { return &_class_data_; }


void OneToOne::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OneToOne*>(&to_msg);
  auto& from = static_cast<const OneToOne&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:esw.OneToOne)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_origin()) {
    _this->_internal_mutable_origin()->::esw::Location::MergeFrom(
        from._internal_origin());
  }
  if (from._internal_has_destination()) {
    _this->_internal_mutable_destination()->::esw::Location::MergeFrom(
        from._internal_destination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OneToOne::CopyFrom(const OneToOne& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esw.OneToOne)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneToOne::IsInitialized() const {
  return true;
}

void OneToOne::InternalSwap(OneToOne* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OneToOne, _impl_.destination_)
      + sizeof(OneToOne::_impl_.destination_)
      - PROTOBUF_FIELD_OFFSET(OneToOne, _impl_.origin_)>(
          reinterpret_cast<char*>(&_impl_.origin_),
          reinterpret_cast<char*>(&other->_impl_.origin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OneToOne::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_scheme_2eproto_getter, &descriptor_table_scheme_2eproto_once,
      file_level_metadata_scheme_2eproto[2]);
}

// ===================================================================

class OneToAll::_Internal {
 public:
  static const ::esw::Location& origin(const OneToAll* msg);
};

const ::esw::Location&
OneToAll::_Internal::origin(const OneToAll* msg) {
  return *msg->_impl_.origin_;
}
OneToAll::OneToAll(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:esw.OneToAll)
}
OneToAll::OneToAll(const OneToAll& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OneToAll* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.origin_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_origin()) {
    _this->_impl_.origin_ = new ::esw::Location(*from._impl_.origin_);
  }
  // @@protoc_insertion_point(copy_constructor:esw.OneToAll)
}

inline void OneToAll::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.origin_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OneToAll::~OneToAll() {
  // @@protoc_insertion_point(destructor:esw.OneToAll)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OneToAll::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.origin_;
}

void OneToAll::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OneToAll::Clear() {
// @@protoc_insertion_point(message_clear_start:esw.OneToAll)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.origin_ != nullptr) {
    delete _impl_.origin_;
  }
  _impl_.origin_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OneToAll::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .esw.Location origin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OneToAll::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esw.OneToAll)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .esw.Location origin = 1;
  if (this->_internal_has_origin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::origin(this),
        _Internal::origin(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esw.OneToAll)
  return target;
}

size_t OneToAll::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esw.OneToAll)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .esw.Location origin = 1;
  if (this->_internal_has_origin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.origin_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OneToAll::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OneToAll::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OneToAll::GetClassData() const { return &_class_data_; }


void OneToAll::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OneToAll*>(&to_msg);
  auto& from = static_cast<const OneToAll&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:esw.OneToAll)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_origin()) {
    _this->_internal_mutable_origin()->::esw::Location::MergeFrom(
        from._internal_origin());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OneToAll::CopyFrom(const OneToAll& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esw.OneToAll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneToAll::IsInitialized() const {
  return true;
}

void OneToAll::InternalSwap(OneToAll* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.origin_, other->_impl_.origin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OneToAll::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_scheme_2eproto_getter, &descriptor_table_scheme_2eproto_once,
      file_level_metadata_scheme_2eproto[3]);
}

// ===================================================================

class Reset::_Internal {
 public:
};

Reset::Reset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:esw.Reset)
}
Reset::Reset(const Reset& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Reset* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:esw.Reset)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Reset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Reset::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Reset::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_scheme_2eproto_getter, &descriptor_table_scheme_2eproto_once,
      file_level_metadata_scheme_2eproto[4]);
}

// ===================================================================

class Location::_Internal {
 public:
};

Location::Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:esw.Location)
}
Location::Location(const Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Location* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:esw.Location)
}

inline void Location::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:esw.Location)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Location::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Location::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:esw.Location)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Location::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Location::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esw.Location)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esw.Location)
  return target;
}

size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esw.Location)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Location::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Location::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Location::GetClassData() const { return &_class_data_; }


void Location::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Location*>(&to_msg);
  auto& from = static_cast<const Location&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:esw.Location)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esw.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  return true;
}

void Location::InternalSwap(Location* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Location, _impl_.y_)
      + sizeof(Location::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Location, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Location::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_scheme_2eproto_getter, &descriptor_table_scheme_2eproto_once,
      file_level_metadata_scheme_2eproto[5]);
}

// ===================================================================

class Response::_Internal {
 public:
};

Response::Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:esw.Response)
}
Response::Response(const Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.errmsg_){}
    , decltype(_impl_.shortest_path_length_){}
    , decltype(_impl_.total_length_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errmsg().empty()) {
    _this->_impl_.errmsg_.Set(from._internal_errmsg(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.shortest_path_length_, &from._impl_.shortest_path_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.shortest_path_length_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:esw.Response)
}

inline void Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.errmsg_){}
    , decltype(_impl_.shortest_path_length_){uint64_t{0u}}
    , decltype(_impl_.total_length_){uint64_t{0u}}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:esw.Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.errmsg_.Destroy();
}

void Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:esw.Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.errmsg_.ClearToEmpty();
  ::memset(&_impl_.shortest_path_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.shortest_path_length_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .esw.Response.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::esw::Response_Status>(val));
        } else
          goto handle_unusual;
        continue;
      // string errMsg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "esw.Response.errMsg"));
        } else
          goto handle_unusual;
        continue;
      // uint64 shortest_path_length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.shortest_path_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 total_length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.total_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esw.Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .esw.Response.Status status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // string errMsg = 2;
  if (!this->_internal_errmsg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "esw.Response.errMsg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_errmsg(), target);
  }

  // uint64 shortest_path_length = 3;
  if (this->_internal_shortest_path_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_shortest_path_length(), target);
  }

  // uint64 total_length = 4;
  if (this->_internal_total_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_total_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esw.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esw.Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string errMsg = 2;
  if (!this->_internal_errmsg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errmsg());
  }

  // uint64 shortest_path_length = 3;
  if (this->_internal_shortest_path_length() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shortest_path_length());
  }

  // uint64 total_length = 4;
  if (this->_internal_total_length() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_total_length());
  }

  // .esw.Response.Status status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Response::GetClassData() const { return &_class_data_; }


void Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Response*>(&to_msg);
  auto& from = static_cast<const Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:esw.Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_errmsg().empty()) {
    _this->_internal_set_errmsg(from._internal_errmsg());
  }
  if (from._internal_shortest_path_length() != 0) {
    _this->_internal_set_shortest_path_length(from._internal_shortest_path_length());
  }
  if (from._internal_total_length() != 0) {
    _this->_internal_set_total_length(from._internal_total_length());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esw.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::InternalSwap(Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.errmsg_, lhs_arena,
      &other->_impl_.errmsg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Response, _impl_.status_)
      + sizeof(Response::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(Response, _impl_.shortest_path_length_)>(
          reinterpret_cast<char*>(&_impl_.shortest_path_length_),
          reinterpret_cast<char*>(&other->_impl_.shortest_path_length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_scheme_2eproto_getter, &descriptor_table_scheme_2eproto_once,
      file_level_metadata_scheme_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace esw
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::esw::Request*
Arena::CreateMaybeMessage< ::esw::Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esw::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::esw::Walk*
Arena::CreateMaybeMessage< ::esw::Walk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esw::Walk >(arena);
}
template<> PROTOBUF_NOINLINE ::esw::OneToOne*
Arena::CreateMaybeMessage< ::esw::OneToOne >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esw::OneToOne >(arena);
}
template<> PROTOBUF_NOINLINE ::esw::OneToAll*
Arena::CreateMaybeMessage< ::esw::OneToAll >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esw::OneToAll >(arena);
}
template<> PROTOBUF_NOINLINE ::esw::Reset*
Arena::CreateMaybeMessage< ::esw::Reset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esw::Reset >(arena);
}
template<> PROTOBUF_NOINLINE ::esw::Location*
Arena::CreateMaybeMessage< ::esw::Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esw::Location >(arena);
}
template<> PROTOBUF_NOINLINE ::esw::Response*
Arena::CreateMaybeMessage< ::esw::Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esw::Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
