diff --git a/ellipse/ellipse.cpp b/ellipse/ellipse.cpp
index 61cd021..fdcd670 100644
--- a/ellipse/ellipse.cpp
+++ b/ellipse/ellipse.cpp
@@ -20,10 +20,14 @@
  */
 
 #include "ellipse.h"
+#include <iostream>
 #include "table3x3.hpp"
 
 using namespace cv;
 
+std::array<double, 360> sin_table = {0};
+std::array<double, 360> cos_table = {0};
+
 static double acot_d(double val)
 {
     double acot = atan(1/val);
@@ -56,7 +60,7 @@ Ellipse Ellipse::fit(const std::vector<Point> &p)
 
     double a, b, c, d, f, g;
     Mat x;
-    solve(A, B, x, DECOMP_SVD);
+    solve(A, B, x, DECOMP_QR);
     a = x.at<double>(0);
     b = x.at<double>(1);
     c = x.at<double>(2);
@@ -65,9 +69,9 @@ Ellipse Ellipse::fit(const std::vector<Point> &p)
     g = 1;
 
     Mat tmp = (Mat_<double>(3,3) <<
-               a, b, d,
-               b, c, f,
-               d, f, g);
+                                 a, b, d,
+            b, c, f,
+            d, f, g);
     double Delta = determinant(tmp);
     double J = a * c - b * b;
     double I = a + c;
@@ -111,26 +115,37 @@ Ellipse::Ellipse(double a, double b, double c, double d, double f, double g)
     f1.y = center.y - temp_c * sin(angle*M_PI/180);
     f2.x = center.x + temp_c * cos(angle*M_PI/180);
     f2.y = center.y + temp_c * sin(angle*M_PI/180);
+
+    ssin = sin(angle/180.0*M_PI);
+    ccos = cos(angle/180.0*M_PI);
 }
 
 Ellipse::Ellipse(Point2f center, Size2f size, float angle)
-    : cv::RotatedRect(center, size, angle)
-{}
+        : cv::RotatedRect(center, size, angle)
+{
+    ssin = sin(angle/180.0*M_PI);
+    ccos = cos(angle/180.0*M_PI);
+}
 
 Point Ellipse::pointAtAngle(double a, Vec2f *normal = 0) const
 {
-    double s = sin(angle/180.0*M_PI);
-    double c = cos(angle/180.0*M_PI);
-    Matx22f rot(c, -s,
-                s, c);
-    Vec2f v(cos(a/180.0*M_PI) * size.width/2.0,
-            sin(a/180.0*M_PI) * size.height/2.0);
-    v = rot * v;
+    double cos_a;
+    double sin_a;
+
+    if (cos_table[a] == 0) {
+        cos_table[a] = cos(a/180.0*M_PI);
+    }
+    cos_a = cos_table[a];
+    if (sin_table[a] == 0) {
+        sin_table[a] = sin(a/180.0*M_PI);
+    }
+    sin_a = sin_table[a];
+
+    Vec2f v(ccos * cos_a * size.width/2.0 -ssin * sin_a * size.height/2.0, ssin * cos_a * size.width/2.0 + ccos * sin_a * size.height/2.0);
 
     if (normal) {
         Vec2f &n = *normal;
-        n = Vec2f(+cos(a/180.0*M_PI) * size.height/2.0, +sin(a/180.0*M_PI) * size.width/2.0);
-        n = rot * n;
+        n = Vec2f(ccos * cos_a * size.height/2.0 -ssin * sin_a * size.width/2.0, ssin * cos_a * size.height/2.0 + ccos * sin_a * size.width/2.0);
     }
     return Point(center.x + v[0], center.y + v[1]);
 }
@@ -153,9 +168,13 @@ static bool isEdgeAtPoint(const Mat1b &bw, const Point p, Point &realP)
             idx = (idx << 1) | (bw(p.y + y, p.x + x) != 0);
         }
     }
-    realP = Point(p.x + centerOfGravity3x3[idx].dx,
-                  p.y + centerOfGravity3x3[idx].dy);
-    return idx != 0;
+    if (idx != 0)
+    {
+        realP = Point(p.x + centerOfGravity3x3[idx].dx,
+                      p.y + centerOfGravity3x3[idx].dy);
+        return true;
+    }
+    return false;
 }
 
 void Ellipse::calcWeight(const Mat1b &bw, Mat3b *dbg, std::vector<Point> *pointsOnEllipse)
@@ -167,7 +186,7 @@ void Ellipse::calcWeight(const Mat1b &bw, Mat3b *dbg, std::vector<Point> *points
 
     for (int a = 0; a < nWeightPoints; a++) {
         Vec2f normal;
-        Point p = pointAtAngle(a * 360 / nWeightPoints, &normal);
+        Point p = pointAtAngle(a, &normal);
         normal /= cv::norm(normal);
         bool pOnEllipse = false;
         if (roi.contains(p)) {
diff --git a/ellipse/ellipse.h b/ellipse/ellipse.h
index 3b022d1..f100dc8 100644
--- a/ellipse/ellipse.h
+++ b/ellipse/ellipse.h
@@ -18,6 +18,9 @@ public:
 
     cv::Point2f f1, f2;
 
+    double ssin;
+    double ccos;
+
     void operator*= (float scale) { center *= scale; size = size * scale; }
     Ellipse operator* (float scale) const { Ellipse e(*this); e *= scale; return e; }
 
diff --git a/meson.build b/meson.build
index 9473ca0..4a02d51 100644
--- a/meson.build
+++ b/meson.build
@@ -1,4 +1,4 @@
 project('ellipses', 'cpp', default_options: [
-  'cpp_args=-Og -g'
-])
+          'cpp_args=-O2 -march=native'
+        ])
 subdir('ellipse')
