// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scheme.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scheme_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scheme_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scheme_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scheme_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scheme_2eproto;
namespace esw {
class Location;
struct LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
class OneToAll;
struct OneToAllDefaultTypeInternal;
extern OneToAllDefaultTypeInternal _OneToAll_default_instance_;
class OneToOne;
struct OneToOneDefaultTypeInternal;
extern OneToOneDefaultTypeInternal _OneToOne_default_instance_;
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Reset;
struct ResetDefaultTypeInternal;
extern ResetDefaultTypeInternal _Reset_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class Walk;
struct WalkDefaultTypeInternal;
extern WalkDefaultTypeInternal _Walk_default_instance_;
}  // namespace esw
PROTOBUF_NAMESPACE_OPEN
template<> ::esw::Location* Arena::CreateMaybeMessage<::esw::Location>(Arena*);
template<> ::esw::OneToAll* Arena::CreateMaybeMessage<::esw::OneToAll>(Arena*);
template<> ::esw::OneToOne* Arena::CreateMaybeMessage<::esw::OneToOne>(Arena*);
template<> ::esw::Request* Arena::CreateMaybeMessage<::esw::Request>(Arena*);
template<> ::esw::Reset* Arena::CreateMaybeMessage<::esw::Reset>(Arena*);
template<> ::esw::Response* Arena::CreateMaybeMessage<::esw::Response>(Arena*);
template<> ::esw::Walk* Arena::CreateMaybeMessage<::esw::Walk>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace esw {

enum Response_Status : int {
  Response_Status_OK = 0,
  Response_Status_ERROR = 1,
  Response_Status_Response_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Response_Status_Response_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Response_Status_IsValid(int value);
constexpr Response_Status Response_Status_Status_MIN = Response_Status_OK;
constexpr Response_Status Response_Status_Status_MAX = Response_Status_ERROR;
constexpr int Response_Status_Status_ARRAYSIZE = Response_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Response_Status_descriptor();
template<typename T>
inline const std::string& Response_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Response_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Response_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Response_Status_descriptor(), enum_t_value);
}
inline bool Response_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Response_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Response_Status>(
    Response_Status_descriptor(), name, value);
}
// ===================================================================

class Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:esw.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  ~Request() override;
  explicit PROTOBUF_CONSTEXPR Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  enum MsgCase {
    kWalk = 1,
    kOneToOne = 2,
    kOneToAll = 3,
    kReset = 4,
    MSG_NOT_SET = 0,
  };

  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Request& from) {
    Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esw.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWalkFieldNumber = 1,
    kOneToOneFieldNumber = 2,
    kOneToAllFieldNumber = 3,
    kResetFieldNumber = 4,
  };
  // .esw.Walk walk = 1;
  bool has_walk() const;
  private:
  bool _internal_has_walk() const;
  public:
  void clear_walk();
  const ::esw::Walk& walk() const;
  PROTOBUF_NODISCARD ::esw::Walk* release_walk();
  ::esw::Walk* mutable_walk();
  void set_allocated_walk(::esw::Walk* walk);
  private:
  const ::esw::Walk& _internal_walk() const;
  ::esw::Walk* _internal_mutable_walk();
  public:
  void unsafe_arena_set_allocated_walk(
      ::esw::Walk* walk);
  ::esw::Walk* unsafe_arena_release_walk();

  // .esw.OneToOne oneToOne = 2;
  bool has_onetoone() const;
  private:
  bool _internal_has_onetoone() const;
  public:
  void clear_onetoone();
  const ::esw::OneToOne& onetoone() const;
  PROTOBUF_NODISCARD ::esw::OneToOne* release_onetoone();
  ::esw::OneToOne* mutable_onetoone();
  void set_allocated_onetoone(::esw::OneToOne* onetoone);
  private:
  const ::esw::OneToOne& _internal_onetoone() const;
  ::esw::OneToOne* _internal_mutable_onetoone();
  public:
  void unsafe_arena_set_allocated_onetoone(
      ::esw::OneToOne* onetoone);
  ::esw::OneToOne* unsafe_arena_release_onetoone();

  // .esw.OneToAll oneToAll = 3;
  bool has_onetoall() const;
  private:
  bool _internal_has_onetoall() const;
  public:
  void clear_onetoall();
  const ::esw::OneToAll& onetoall() const;
  PROTOBUF_NODISCARD ::esw::OneToAll* release_onetoall();
  ::esw::OneToAll* mutable_onetoall();
  void set_allocated_onetoall(::esw::OneToAll* onetoall);
  private:
  const ::esw::OneToAll& _internal_onetoall() const;
  ::esw::OneToAll* _internal_mutable_onetoall();
  public:
  void unsafe_arena_set_allocated_onetoall(
      ::esw::OneToAll* onetoall);
  ::esw::OneToAll* unsafe_arena_release_onetoall();

  // .esw.Reset reset = 4;
  bool has_reset() const;
  private:
  bool _internal_has_reset() const;
  public:
  void clear_reset();
  const ::esw::Reset& reset() const;
  PROTOBUF_NODISCARD ::esw::Reset* release_reset();
  ::esw::Reset* mutable_reset();
  void set_allocated_reset(::esw::Reset* reset);
  private:
  const ::esw::Reset& _internal_reset() const;
  ::esw::Reset* _internal_mutable_reset();
  public:
  void unsafe_arena_set_allocated_reset(
      ::esw::Reset* reset);
  ::esw::Reset* unsafe_arena_release_reset();

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:esw.Request)
 private:
  class _Internal;
  void set_has_walk();
  void set_has_onetoone();
  void set_has_onetoall();
  void set_has_reset();

  inline bool has_msg() const;
  inline void clear_has_msg();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union MsgUnion {
      constexpr MsgUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::esw::Walk* walk_;
      ::esw::OneToOne* onetoone_;
      ::esw::OneToAll* onetoall_;
      ::esw::Reset* reset_;
    } msg_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_scheme_2eproto;
};
// -------------------------------------------------------------------

class Walk final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:esw.Walk) */ {
 public:
  inline Walk() : Walk(nullptr) {}
  ~Walk() override;
  explicit PROTOBUF_CONSTEXPR Walk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Walk(const Walk& from);
  Walk(Walk&& from) noexcept
    : Walk() {
    *this = ::std::move(from);
  }

  inline Walk& operator=(const Walk& from) {
    CopyFrom(from);
    return *this;
  }
  inline Walk& operator=(Walk&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Walk& default_instance() {
    return *internal_default_instance();
  }
  static inline const Walk* internal_default_instance() {
    return reinterpret_cast<const Walk*>(
               &_Walk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Walk& a, Walk& b) {
    a.Swap(&b);
  }
  inline void Swap(Walk* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Walk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Walk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Walk>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Walk& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Walk& from) {
    Walk::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Walk* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esw.Walk";
  }
  protected:
  explicit Walk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationsFieldNumber = 1,
    kLengthsFieldNumber = 2,
  };
  // repeated .esw.Location locations = 1;
  int locations_size() const;
  private:
  int _internal_locations_size() const;
  public:
  void clear_locations();
  ::esw::Location* mutable_locations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esw::Location >*
      mutable_locations();
  private:
  const ::esw::Location& _internal_locations(int index) const;
  ::esw::Location* _internal_add_locations();
  public:
  const ::esw::Location& locations(int index) const;
  ::esw::Location* add_locations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esw::Location >&
      locations() const;

  // repeated uint32 lengths = 2;
  int lengths_size() const;
  private:
  int _internal_lengths_size() const;
  public:
  void clear_lengths();
  private:
  uint32_t _internal_lengths(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_lengths() const;
  void _internal_add_lengths(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_lengths();
  public:
  uint32_t lengths(int index) const;
  void set_lengths(int index, uint32_t value);
  void add_lengths(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      lengths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_lengths();

  // @@protoc_insertion_point(class_scope:esw.Walk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esw::Location > locations_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > lengths_;
    mutable std::atomic<int> _lengths_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_scheme_2eproto;
};
// -------------------------------------------------------------------

class OneToOne final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:esw.OneToOne) */ {
 public:
  inline OneToOne() : OneToOne(nullptr) {}
  ~OneToOne() override;
  explicit PROTOBUF_CONSTEXPR OneToOne(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OneToOne(const OneToOne& from);
  OneToOne(OneToOne&& from) noexcept
    : OneToOne() {
    *this = ::std::move(from);
  }

  inline OneToOne& operator=(const OneToOne& from) {
    CopyFrom(from);
    return *this;
  }
  inline OneToOne& operator=(OneToOne&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OneToOne& default_instance() {
    return *internal_default_instance();
  }
  static inline const OneToOne* internal_default_instance() {
    return reinterpret_cast<const OneToOne*>(
               &_OneToOne_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OneToOne& a, OneToOne& b) {
    a.Swap(&b);
  }
  inline void Swap(OneToOne* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OneToOne* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OneToOne* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OneToOne>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OneToOne& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OneToOne& from) {
    OneToOne::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OneToOne* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esw.OneToOne";
  }
  protected:
  explicit OneToOne(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginFieldNumber = 1,
    kDestinationFieldNumber = 2,
  };
  // .esw.Location origin = 1;
  bool has_origin() const;
  private:
  bool _internal_has_origin() const;
  public:
  void clear_origin();
  const ::esw::Location& origin() const;
  PROTOBUF_NODISCARD ::esw::Location* release_origin();
  ::esw::Location* mutable_origin();
  void set_allocated_origin(::esw::Location* origin);
  private:
  const ::esw::Location& _internal_origin() const;
  ::esw::Location* _internal_mutable_origin();
  public:
  void unsafe_arena_set_allocated_origin(
      ::esw::Location* origin);
  ::esw::Location* unsafe_arena_release_origin();

  // .esw.Location destination = 2;
  bool has_destination() const;
  private:
  bool _internal_has_destination() const;
  public:
  void clear_destination();
  const ::esw::Location& destination() const;
  PROTOBUF_NODISCARD ::esw::Location* release_destination();
  ::esw::Location* mutable_destination();
  void set_allocated_destination(::esw::Location* destination);
  private:
  const ::esw::Location& _internal_destination() const;
  ::esw::Location* _internal_mutable_destination();
  public:
  void unsafe_arena_set_allocated_destination(
      ::esw::Location* destination);
  ::esw::Location* unsafe_arena_release_destination();

  // @@protoc_insertion_point(class_scope:esw.OneToOne)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::esw::Location* origin_;
    ::esw::Location* destination_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_scheme_2eproto;
};
// -------------------------------------------------------------------

class OneToAll final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:esw.OneToAll) */ {
 public:
  inline OneToAll() : OneToAll(nullptr) {}
  ~OneToAll() override;
  explicit PROTOBUF_CONSTEXPR OneToAll(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OneToAll(const OneToAll& from);
  OneToAll(OneToAll&& from) noexcept
    : OneToAll() {
    *this = ::std::move(from);
  }

  inline OneToAll& operator=(const OneToAll& from) {
    CopyFrom(from);
    return *this;
  }
  inline OneToAll& operator=(OneToAll&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OneToAll& default_instance() {
    return *internal_default_instance();
  }
  static inline const OneToAll* internal_default_instance() {
    return reinterpret_cast<const OneToAll*>(
               &_OneToAll_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OneToAll& a, OneToAll& b) {
    a.Swap(&b);
  }
  inline void Swap(OneToAll* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OneToAll* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OneToAll* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OneToAll>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OneToAll& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OneToAll& from) {
    OneToAll::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OneToAll* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esw.OneToAll";
  }
  protected:
  explicit OneToAll(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginFieldNumber = 1,
  };
  // .esw.Location origin = 1;
  bool has_origin() const;
  private:
  bool _internal_has_origin() const;
  public:
  void clear_origin();
  const ::esw::Location& origin() const;
  PROTOBUF_NODISCARD ::esw::Location* release_origin();
  ::esw::Location* mutable_origin();
  void set_allocated_origin(::esw::Location* origin);
  private:
  const ::esw::Location& _internal_origin() const;
  ::esw::Location* _internal_mutable_origin();
  public:
  void unsafe_arena_set_allocated_origin(
      ::esw::Location* origin);
  ::esw::Location* unsafe_arena_release_origin();

  // @@protoc_insertion_point(class_scope:esw.OneToAll)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::esw::Location* origin_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_scheme_2eproto;
};
// -------------------------------------------------------------------

class Reset final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:esw.Reset) */ {
 public:
  inline Reset() : Reset(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Reset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Reset(const Reset& from);
  Reset(Reset&& from) noexcept
    : Reset() {
    *this = ::std::move(from);
  }

  inline Reset& operator=(const Reset& from) {
    CopyFrom(from);
    return *this;
  }
  inline Reset& operator=(Reset&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Reset& default_instance() {
    return *internal_default_instance();
  }
  static inline const Reset* internal_default_instance() {
    return reinterpret_cast<const Reset*>(
               &_Reset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Reset& a, Reset& b) {
    a.Swap(&b);
  }
  inline void Swap(Reset* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Reset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Reset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Reset>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Reset& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Reset& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esw.Reset";
  }
  protected:
  explicit Reset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:esw.Reset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_scheme_2eproto;
};
// -------------------------------------------------------------------

class Location final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:esw.Location) */ {
 public:
  inline Location() : Location(nullptr) {}
  ~Location() override;
  explicit PROTOBUF_CONSTEXPR Location(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Location(const Location& from);
  Location(Location&& from) noexcept
    : Location() {
    *this = ::std::move(from);
  }

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline Location& operator=(Location&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Location& default_instance() {
    return *internal_default_instance();
  }
  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
               &_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Location& a, Location& b) {
    a.Swap(&b);
  }
  inline void Swap(Location* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Location* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Location>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Location& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Location& from) {
    Location::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Location* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esw.Location";
  }
  protected:
  explicit Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // int32 x = 1;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 2;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:esw.Location)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t x_;
    int32_t y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_scheme_2eproto;
};
// -------------------------------------------------------------------

class Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:esw.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  ~Response() override;
  explicit PROTOBUF_CONSTEXPR Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Response& from) {
    Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esw.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Response_Status Status;
  static constexpr Status OK =
    Response_Status_OK;
  static constexpr Status ERROR =
    Response_Status_ERROR;
  static inline bool Status_IsValid(int value) {
    return Response_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    Response_Status_Status_MIN;
  static constexpr Status Status_MAX =
    Response_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    Response_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return Response_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return Response_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return Response_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kErrMsgFieldNumber = 2,
    kShortestPathLengthFieldNumber = 3,
    kTotalLengthFieldNumber = 4,
    kStatusFieldNumber = 1,
  };
  // string errMsg = 2;
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // uint64 shortest_path_length = 3;
  void clear_shortest_path_length();
  uint64_t shortest_path_length() const;
  void set_shortest_path_length(uint64_t value);
  private:
  uint64_t _internal_shortest_path_length() const;
  void _internal_set_shortest_path_length(uint64_t value);
  public:

  // uint64 total_length = 4;
  void clear_total_length();
  uint64_t total_length() const;
  void set_total_length(uint64_t value);
  private:
  uint64_t _internal_total_length() const;
  void _internal_set_total_length(uint64_t value);
  public:

  // .esw.Response.Status status = 1;
  void clear_status();
  ::esw::Response_Status status() const;
  void set_status(::esw::Response_Status value);
  private:
  ::esw::Response_Status _internal_status() const;
  void _internal_set_status(::esw::Response_Status value);
  public:

  // @@protoc_insertion_point(class_scope:esw.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
    uint64_t shortest_path_length_;
    uint64_t total_length_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_scheme_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// .esw.Walk walk = 1;
inline bool Request::_internal_has_walk() const {
  return msg_case() == kWalk;
}
inline bool Request::has_walk() const {
  return _internal_has_walk();
}
inline void Request::set_has_walk() {
  _impl_._oneof_case_[0] = kWalk;
}
inline void Request::clear_walk() {
  if (_internal_has_walk()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.walk_;
    }
    clear_has_msg();
  }
}
inline ::esw::Walk* Request::release_walk() {
  // @@protoc_insertion_point(field_release:esw.Request.walk)
  if (_internal_has_walk()) {
    clear_has_msg();
    ::esw::Walk* temp = _impl_.msg_.walk_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.walk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::esw::Walk& Request::_internal_walk() const {
  return _internal_has_walk()
      ? *_impl_.msg_.walk_
      : reinterpret_cast< ::esw::Walk&>(::esw::_Walk_default_instance_);
}
inline const ::esw::Walk& Request::walk() const {
  // @@protoc_insertion_point(field_get:esw.Request.walk)
  return _internal_walk();
}
inline ::esw::Walk* Request::unsafe_arena_release_walk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:esw.Request.walk)
  if (_internal_has_walk()) {
    clear_has_msg();
    ::esw::Walk* temp = _impl_.msg_.walk_;
    _impl_.msg_.walk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_walk(::esw::Walk* walk) {
  clear_msg();
  if (walk) {
    set_has_walk();
    _impl_.msg_.walk_ = walk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esw.Request.walk)
}
inline ::esw::Walk* Request::_internal_mutable_walk() {
  if (!_internal_has_walk()) {
    clear_msg();
    set_has_walk();
    _impl_.msg_.walk_ = CreateMaybeMessage< ::esw::Walk >(GetArenaForAllocation());
  }
  return _impl_.msg_.walk_;
}
inline ::esw::Walk* Request::mutable_walk() {
  ::esw::Walk* _msg = _internal_mutable_walk();
  // @@protoc_insertion_point(field_mutable:esw.Request.walk)
  return _msg;
}

// .esw.OneToOne oneToOne = 2;
inline bool Request::_internal_has_onetoone() const {
  return msg_case() == kOneToOne;
}
inline bool Request::has_onetoone() const {
  return _internal_has_onetoone();
}
inline void Request::set_has_onetoone() {
  _impl_._oneof_case_[0] = kOneToOne;
}
inline void Request::clear_onetoone() {
  if (_internal_has_onetoone()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.onetoone_;
    }
    clear_has_msg();
  }
}
inline ::esw::OneToOne* Request::release_onetoone() {
  // @@protoc_insertion_point(field_release:esw.Request.oneToOne)
  if (_internal_has_onetoone()) {
    clear_has_msg();
    ::esw::OneToOne* temp = _impl_.msg_.onetoone_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.onetoone_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::esw::OneToOne& Request::_internal_onetoone() const {
  return _internal_has_onetoone()
      ? *_impl_.msg_.onetoone_
      : reinterpret_cast< ::esw::OneToOne&>(::esw::_OneToOne_default_instance_);
}
inline const ::esw::OneToOne& Request::onetoone() const {
  // @@protoc_insertion_point(field_get:esw.Request.oneToOne)
  return _internal_onetoone();
}
inline ::esw::OneToOne* Request::unsafe_arena_release_onetoone() {
  // @@protoc_insertion_point(field_unsafe_arena_release:esw.Request.oneToOne)
  if (_internal_has_onetoone()) {
    clear_has_msg();
    ::esw::OneToOne* temp = _impl_.msg_.onetoone_;
    _impl_.msg_.onetoone_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_onetoone(::esw::OneToOne* onetoone) {
  clear_msg();
  if (onetoone) {
    set_has_onetoone();
    _impl_.msg_.onetoone_ = onetoone;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esw.Request.oneToOne)
}
inline ::esw::OneToOne* Request::_internal_mutable_onetoone() {
  if (!_internal_has_onetoone()) {
    clear_msg();
    set_has_onetoone();
    _impl_.msg_.onetoone_ = CreateMaybeMessage< ::esw::OneToOne >(GetArenaForAllocation());
  }
  return _impl_.msg_.onetoone_;
}
inline ::esw::OneToOne* Request::mutable_onetoone() {
  ::esw::OneToOne* _msg = _internal_mutable_onetoone();
  // @@protoc_insertion_point(field_mutable:esw.Request.oneToOne)
  return _msg;
}

// .esw.OneToAll oneToAll = 3;
inline bool Request::_internal_has_onetoall() const {
  return msg_case() == kOneToAll;
}
inline bool Request::has_onetoall() const {
  return _internal_has_onetoall();
}
inline void Request::set_has_onetoall() {
  _impl_._oneof_case_[0] = kOneToAll;
}
inline void Request::clear_onetoall() {
  if (_internal_has_onetoall()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.onetoall_;
    }
    clear_has_msg();
  }
}
inline ::esw::OneToAll* Request::release_onetoall() {
  // @@protoc_insertion_point(field_release:esw.Request.oneToAll)
  if (_internal_has_onetoall()) {
    clear_has_msg();
    ::esw::OneToAll* temp = _impl_.msg_.onetoall_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.onetoall_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::esw::OneToAll& Request::_internal_onetoall() const {
  return _internal_has_onetoall()
      ? *_impl_.msg_.onetoall_
      : reinterpret_cast< ::esw::OneToAll&>(::esw::_OneToAll_default_instance_);
}
inline const ::esw::OneToAll& Request::onetoall() const {
  // @@protoc_insertion_point(field_get:esw.Request.oneToAll)
  return _internal_onetoall();
}
inline ::esw::OneToAll* Request::unsafe_arena_release_onetoall() {
  // @@protoc_insertion_point(field_unsafe_arena_release:esw.Request.oneToAll)
  if (_internal_has_onetoall()) {
    clear_has_msg();
    ::esw::OneToAll* temp = _impl_.msg_.onetoall_;
    _impl_.msg_.onetoall_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_onetoall(::esw::OneToAll* onetoall) {
  clear_msg();
  if (onetoall) {
    set_has_onetoall();
    _impl_.msg_.onetoall_ = onetoall;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esw.Request.oneToAll)
}
inline ::esw::OneToAll* Request::_internal_mutable_onetoall() {
  if (!_internal_has_onetoall()) {
    clear_msg();
    set_has_onetoall();
    _impl_.msg_.onetoall_ = CreateMaybeMessage< ::esw::OneToAll >(GetArenaForAllocation());
  }
  return _impl_.msg_.onetoall_;
}
inline ::esw::OneToAll* Request::mutable_onetoall() {
  ::esw::OneToAll* _msg = _internal_mutable_onetoall();
  // @@protoc_insertion_point(field_mutable:esw.Request.oneToAll)
  return _msg;
}

// .esw.Reset reset = 4;
inline bool Request::_internal_has_reset() const {
  return msg_case() == kReset;
}
inline bool Request::has_reset() const {
  return _internal_has_reset();
}
inline void Request::set_has_reset() {
  _impl_._oneof_case_[0] = kReset;
}
inline void Request::clear_reset() {
  if (_internal_has_reset()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.reset_;
    }
    clear_has_msg();
  }
}
inline ::esw::Reset* Request::release_reset() {
  // @@protoc_insertion_point(field_release:esw.Request.reset)
  if (_internal_has_reset()) {
    clear_has_msg();
    ::esw::Reset* temp = _impl_.msg_.reset_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.reset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::esw::Reset& Request::_internal_reset() const {
  return _internal_has_reset()
      ? *_impl_.msg_.reset_
      : reinterpret_cast< ::esw::Reset&>(::esw::_Reset_default_instance_);
}
inline const ::esw::Reset& Request::reset() const {
  // @@protoc_insertion_point(field_get:esw.Request.reset)
  return _internal_reset();
}
inline ::esw::Reset* Request::unsafe_arena_release_reset() {
  // @@protoc_insertion_point(field_unsafe_arena_release:esw.Request.reset)
  if (_internal_has_reset()) {
    clear_has_msg();
    ::esw::Reset* temp = _impl_.msg_.reset_;
    _impl_.msg_.reset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_reset(::esw::Reset* reset) {
  clear_msg();
  if (reset) {
    set_has_reset();
    _impl_.msg_.reset_ = reset;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esw.Request.reset)
}
inline ::esw::Reset* Request::_internal_mutable_reset() {
  if (!_internal_has_reset()) {
    clear_msg();
    set_has_reset();
    _impl_.msg_.reset_ = CreateMaybeMessage< ::esw::Reset >(GetArenaForAllocation());
  }
  return _impl_.msg_.reset_;
}
inline ::esw::Reset* Request::mutable_reset() {
  ::esw::Reset* _msg = _internal_mutable_reset();
  // @@protoc_insertion_point(field_mutable:esw.Request.reset)
  return _msg;
}

inline bool Request::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void Request::clear_has_msg() {
  _impl_._oneof_case_[0] = MSG_NOT_SET;
}
inline Request::MsgCase Request::msg_case() const {
  return Request::MsgCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Walk

// repeated .esw.Location locations = 1;
inline int Walk::_internal_locations_size() const {
  return _impl_.locations_.size();
}
inline int Walk::locations_size() const {
  return _internal_locations_size();
}
inline void Walk::clear_locations() {
  _impl_.locations_.Clear();
}
inline ::esw::Location* Walk::mutable_locations(int index) {
  // @@protoc_insertion_point(field_mutable:esw.Walk.locations)
  return _impl_.locations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esw::Location >*
Walk::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:esw.Walk.locations)
  return &_impl_.locations_;
}
inline const ::esw::Location& Walk::_internal_locations(int index) const {
  return _impl_.locations_.Get(index);
}
inline const ::esw::Location& Walk::locations(int index) const {
  // @@protoc_insertion_point(field_get:esw.Walk.locations)
  return _internal_locations(index);
}
inline ::esw::Location* Walk::_internal_add_locations() {
  return _impl_.locations_.Add();
}
inline ::esw::Location* Walk::add_locations() {
  ::esw::Location* _add = _internal_add_locations();
  // @@protoc_insertion_point(field_add:esw.Walk.locations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esw::Location >&
Walk::locations() const {
  // @@protoc_insertion_point(field_list:esw.Walk.locations)
  return _impl_.locations_;
}

// repeated uint32 lengths = 2;
inline int Walk::_internal_lengths_size() const {
  return _impl_.lengths_.size();
}
inline int Walk::lengths_size() const {
  return _internal_lengths_size();
}
inline void Walk::clear_lengths() {
  _impl_.lengths_.Clear();
}
inline uint32_t Walk::_internal_lengths(int index) const {
  return _impl_.lengths_.Get(index);
}
inline uint32_t Walk::lengths(int index) const {
  // @@protoc_insertion_point(field_get:esw.Walk.lengths)
  return _internal_lengths(index);
}
inline void Walk::set_lengths(int index, uint32_t value) {
  _impl_.lengths_.Set(index, value);
  // @@protoc_insertion_point(field_set:esw.Walk.lengths)
}
inline void Walk::_internal_add_lengths(uint32_t value) {
  _impl_.lengths_.Add(value);
}
inline void Walk::add_lengths(uint32_t value) {
  _internal_add_lengths(value);
  // @@protoc_insertion_point(field_add:esw.Walk.lengths)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Walk::_internal_lengths() const {
  return _impl_.lengths_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Walk::lengths() const {
  // @@protoc_insertion_point(field_list:esw.Walk.lengths)
  return _internal_lengths();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Walk::_internal_mutable_lengths() {
  return &_impl_.lengths_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Walk::mutable_lengths() {
  // @@protoc_insertion_point(field_mutable_list:esw.Walk.lengths)
  return _internal_mutable_lengths();
}

// -------------------------------------------------------------------

// OneToOne

// .esw.Location origin = 1;
inline bool OneToOne::_internal_has_origin() const {
  return this != internal_default_instance() && _impl_.origin_ != nullptr;
}
inline bool OneToOne::has_origin() const {
  return _internal_has_origin();
}
inline void OneToOne::clear_origin() {
  if (GetArenaForAllocation() == nullptr && _impl_.origin_ != nullptr) {
    delete _impl_.origin_;
  }
  _impl_.origin_ = nullptr;
}
inline const ::esw::Location& OneToOne::_internal_origin() const {
  const ::esw::Location* p = _impl_.origin_;
  return p != nullptr ? *p : reinterpret_cast<const ::esw::Location&>(
      ::esw::_Location_default_instance_);
}
inline const ::esw::Location& OneToOne::origin() const {
  // @@protoc_insertion_point(field_get:esw.OneToOne.origin)
  return _internal_origin();
}
inline void OneToOne::unsafe_arena_set_allocated_origin(
    ::esw::Location* origin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.origin_);
  }
  _impl_.origin_ = origin;
  if (origin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esw.OneToOne.origin)
}
inline ::esw::Location* OneToOne::release_origin() {
  
  ::esw::Location* temp = _impl_.origin_;
  _impl_.origin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::esw::Location* OneToOne::unsafe_arena_release_origin() {
  // @@protoc_insertion_point(field_release:esw.OneToOne.origin)
  
  ::esw::Location* temp = _impl_.origin_;
  _impl_.origin_ = nullptr;
  return temp;
}
inline ::esw::Location* OneToOne::_internal_mutable_origin() {
  
  if (_impl_.origin_ == nullptr) {
    auto* p = CreateMaybeMessage<::esw::Location>(GetArenaForAllocation());
    _impl_.origin_ = p;
  }
  return _impl_.origin_;
}
inline ::esw::Location* OneToOne::mutable_origin() {
  ::esw::Location* _msg = _internal_mutable_origin();
  // @@protoc_insertion_point(field_mutable:esw.OneToOne.origin)
  return _msg;
}
inline void OneToOne::set_allocated_origin(::esw::Location* origin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.origin_;
  }
  if (origin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(origin);
    if (message_arena != submessage_arena) {
      origin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, origin, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.origin_ = origin;
  // @@protoc_insertion_point(field_set_allocated:esw.OneToOne.origin)
}

// .esw.Location destination = 2;
inline bool OneToOne::_internal_has_destination() const {
  return this != internal_default_instance() && _impl_.destination_ != nullptr;
}
inline bool OneToOne::has_destination() const {
  return _internal_has_destination();
}
inline void OneToOne::clear_destination() {
  if (GetArenaForAllocation() == nullptr && _impl_.destination_ != nullptr) {
    delete _impl_.destination_;
  }
  _impl_.destination_ = nullptr;
}
inline const ::esw::Location& OneToOne::_internal_destination() const {
  const ::esw::Location* p = _impl_.destination_;
  return p != nullptr ? *p : reinterpret_cast<const ::esw::Location&>(
      ::esw::_Location_default_instance_);
}
inline const ::esw::Location& OneToOne::destination() const {
  // @@protoc_insertion_point(field_get:esw.OneToOne.destination)
  return _internal_destination();
}
inline void OneToOne::unsafe_arena_set_allocated_destination(
    ::esw::Location* destination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.destination_);
  }
  _impl_.destination_ = destination;
  if (destination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esw.OneToOne.destination)
}
inline ::esw::Location* OneToOne::release_destination() {
  
  ::esw::Location* temp = _impl_.destination_;
  _impl_.destination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::esw::Location* OneToOne::unsafe_arena_release_destination() {
  // @@protoc_insertion_point(field_release:esw.OneToOne.destination)
  
  ::esw::Location* temp = _impl_.destination_;
  _impl_.destination_ = nullptr;
  return temp;
}
inline ::esw::Location* OneToOne::_internal_mutable_destination() {
  
  if (_impl_.destination_ == nullptr) {
    auto* p = CreateMaybeMessage<::esw::Location>(GetArenaForAllocation());
    _impl_.destination_ = p;
  }
  return _impl_.destination_;
}
inline ::esw::Location* OneToOne::mutable_destination() {
  ::esw::Location* _msg = _internal_mutable_destination();
  // @@protoc_insertion_point(field_mutable:esw.OneToOne.destination)
  return _msg;
}
inline void OneToOne::set_allocated_destination(::esw::Location* destination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.destination_;
  }
  if (destination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(destination);
    if (message_arena != submessage_arena) {
      destination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destination, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.destination_ = destination;
  // @@protoc_insertion_point(field_set_allocated:esw.OneToOne.destination)
}

// -------------------------------------------------------------------

// OneToAll

// .esw.Location origin = 1;
inline bool OneToAll::_internal_has_origin() const {
  return this != internal_default_instance() && _impl_.origin_ != nullptr;
}
inline bool OneToAll::has_origin() const {
  return _internal_has_origin();
}
inline void OneToAll::clear_origin() {
  if (GetArenaForAllocation() == nullptr && _impl_.origin_ != nullptr) {
    delete _impl_.origin_;
  }
  _impl_.origin_ = nullptr;
}
inline const ::esw::Location& OneToAll::_internal_origin() const {
  const ::esw::Location* p = _impl_.origin_;
  return p != nullptr ? *p : reinterpret_cast<const ::esw::Location&>(
      ::esw::_Location_default_instance_);
}
inline const ::esw::Location& OneToAll::origin() const {
  // @@protoc_insertion_point(field_get:esw.OneToAll.origin)
  return _internal_origin();
}
inline void OneToAll::unsafe_arena_set_allocated_origin(
    ::esw::Location* origin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.origin_);
  }
  _impl_.origin_ = origin;
  if (origin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esw.OneToAll.origin)
}
inline ::esw::Location* OneToAll::release_origin() {
  
  ::esw::Location* temp = _impl_.origin_;
  _impl_.origin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::esw::Location* OneToAll::unsafe_arena_release_origin() {
  // @@protoc_insertion_point(field_release:esw.OneToAll.origin)
  
  ::esw::Location* temp = _impl_.origin_;
  _impl_.origin_ = nullptr;
  return temp;
}
inline ::esw::Location* OneToAll::_internal_mutable_origin() {
  
  if (_impl_.origin_ == nullptr) {
    auto* p = CreateMaybeMessage<::esw::Location>(GetArenaForAllocation());
    _impl_.origin_ = p;
  }
  return _impl_.origin_;
}
inline ::esw::Location* OneToAll::mutable_origin() {
  ::esw::Location* _msg = _internal_mutable_origin();
  // @@protoc_insertion_point(field_mutable:esw.OneToAll.origin)
  return _msg;
}
inline void OneToAll::set_allocated_origin(::esw::Location* origin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.origin_;
  }
  if (origin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(origin);
    if (message_arena != submessage_arena) {
      origin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, origin, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.origin_ = origin;
  // @@protoc_insertion_point(field_set_allocated:esw.OneToAll.origin)
}

// -------------------------------------------------------------------

// Reset

// -------------------------------------------------------------------

// Location

// int32 x = 1;
inline void Location::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t Location::_internal_x() const {
  return _impl_.x_;
}
inline int32_t Location::x() const {
  // @@protoc_insertion_point(field_get:esw.Location.x)
  return _internal_x();
}
inline void Location::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void Location::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:esw.Location.x)
}

// int32 y = 2;
inline void Location::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t Location::_internal_y() const {
  return _impl_.y_;
}
inline int32_t Location::y() const {
  // @@protoc_insertion_point(field_get:esw.Location.y)
  return _internal_y();
}
inline void Location::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void Location::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:esw.Location.y)
}

// -------------------------------------------------------------------

// Response

// .esw.Response.Status status = 1;
inline void Response::clear_status() {
  _impl_.status_ = 0;
}
inline ::esw::Response_Status Response::_internal_status() const {
  return static_cast< ::esw::Response_Status >(_impl_.status_);
}
inline ::esw::Response_Status Response::status() const {
  // @@protoc_insertion_point(field_get:esw.Response.status)
  return _internal_status();
}
inline void Response::_internal_set_status(::esw::Response_Status value) {
  
  _impl_.status_ = value;
}
inline void Response::set_status(::esw::Response_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:esw.Response.status)
}

// string errMsg = 2;
inline void Response::clear_errmsg() {
  _impl_.errmsg_.ClearToEmpty();
}
inline const std::string& Response::errmsg() const {
  // @@protoc_insertion_point(field_get:esw.Response.errMsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Response::set_errmsg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.errmsg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:esw.Response.errMsg)
}
inline std::string* Response::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:esw.Response.errMsg)
  return _s;
}
inline const std::string& Response::_internal_errmsg() const {
  return _impl_.errmsg_.Get();
}
inline void Response::_internal_set_errmsg(const std::string& value) {
  
  _impl_.errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* Response::_internal_mutable_errmsg() {
  
  return _impl_.errmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* Response::release_errmsg() {
  // @@protoc_insertion_point(field_release:esw.Response.errMsg)
  return _impl_.errmsg_.Release();
}
inline void Response::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  _impl_.errmsg_.SetAllocated(errmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errmsg_.IsDefault()) {
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:esw.Response.errMsg)
}

// uint64 shortest_path_length = 3;
inline void Response::clear_shortest_path_length() {
  _impl_.shortest_path_length_ = uint64_t{0u};
}
inline uint64_t Response::_internal_shortest_path_length() const {
  return _impl_.shortest_path_length_;
}
inline uint64_t Response::shortest_path_length() const {
  // @@protoc_insertion_point(field_get:esw.Response.shortest_path_length)
  return _internal_shortest_path_length();
}
inline void Response::_internal_set_shortest_path_length(uint64_t value) {
  
  _impl_.shortest_path_length_ = value;
}
inline void Response::set_shortest_path_length(uint64_t value) {
  _internal_set_shortest_path_length(value);
  // @@protoc_insertion_point(field_set:esw.Response.shortest_path_length)
}

// uint64 total_length = 4;
inline void Response::clear_total_length() {
  _impl_.total_length_ = uint64_t{0u};
}
inline uint64_t Response::_internal_total_length() const {
  return _impl_.total_length_;
}
inline uint64_t Response::total_length() const {
  // @@protoc_insertion_point(field_get:esw.Response.total_length)
  return _internal_total_length();
}
inline void Response::_internal_set_total_length(uint64_t value) {
  
  _impl_.total_length_ = value;
}
inline void Response::set_total_length(uint64_t value) {
  _internal_set_total_length(value);
  // @@protoc_insertion_point(field_set:esw.Response.total_length)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace esw

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::esw::Response_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::esw::Response_Status>() {
  return ::esw::Response_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scheme_2eproto
