// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: measurements.proto

#include "measurements.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace esw {
        template <typename>
PROTOBUF_CONSTEXPR PMeasurementInfo::PMeasurementInfo(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.measurername_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.timestamp_)*/ ::int64_t{0},
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct PMeasurementInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PMeasurementInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PMeasurementInfoDefaultTypeInternal() {}
  union {
    PMeasurementInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PMeasurementInfoDefaultTypeInternal _PMeasurementInfo_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR PRecords::PRecords(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.download_)*/ {},
      /*decltype(_impl_.upload_)*/ {},
      /*decltype(_impl_.ping_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct PRecordsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PRecordsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PRecordsDefaultTypeInternal() {}
  union {
    PRecords _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PRecordsDefaultTypeInternal _PRecords_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR PRequestTuple::PRequestTuple(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.measurementinfo_)*/ nullptr,
      /*decltype(_impl_.records_)*/ nullptr,
    } {}
struct PRequestTupleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PRequestTupleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PRequestTupleDefaultTypeInternal() {}
  union {
    PRequestTuple _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PRequestTupleDefaultTypeInternal _PRequestTuple_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR PMeasurementsRequest::PMeasurementsRequest(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.requesttuple_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct PMeasurementsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PMeasurementsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PMeasurementsRequestDefaultTypeInternal() {}
  union {
    PMeasurementsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PMeasurementsRequestDefaultTypeInternal _PMeasurementsRequest_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR PAverage::PAverage(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.download_)*/ 0,
      /*decltype(_impl_.upload_)*/ 0,
      /*decltype(_impl_.ping_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct PAverageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PAverageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PAverageDefaultTypeInternal() {}
  union {
    PAverage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PAverageDefaultTypeInternal _PAverage_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR PResponseTuple::PResponseTuple(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.measurementinfo_)*/ nullptr,
      /*decltype(_impl_.average_)*/ nullptr,
    } {}
struct PResponseTupleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PResponseTupleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PResponseTupleDefaultTypeInternal() {}
  union {
    PResponseTuple _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PResponseTupleDefaultTypeInternal _PResponseTuple_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR PMeasurementsResponse::PMeasurementsResponse(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.responsetuple_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct PMeasurementsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PMeasurementsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PMeasurementsResponseDefaultTypeInternal() {}
  union {
    PMeasurementsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PMeasurementsResponseDefaultTypeInternal _PMeasurementsResponse_default_instance_;
}  // namespace esw
static ::_pb::Metadata file_level_metadata_measurements_2eproto[7];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_measurements_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_measurements_2eproto = nullptr;
const ::uint32_t TableStruct_measurements_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::esw::PMeasurementInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::esw::PMeasurementInfo, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::esw::PMeasurementInfo, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::esw::PMeasurementInfo, _impl_.measurername_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::esw::PRecords, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::esw::PRecords, _impl_.download_),
    PROTOBUF_FIELD_OFFSET(::esw::PRecords, _impl_.upload_),
    PROTOBUF_FIELD_OFFSET(::esw::PRecords, _impl_.ping_),
    PROTOBUF_FIELD_OFFSET(::esw::PRequestTuple, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::esw::PRequestTuple, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::esw::PRequestTuple, _impl_.measurementinfo_),
    PROTOBUF_FIELD_OFFSET(::esw::PRequestTuple, _impl_.records_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::esw::PMeasurementsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::esw::PMeasurementsRequest, _impl_.requesttuple_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::esw::PAverage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::esw::PAverage, _impl_.download_),
    PROTOBUF_FIELD_OFFSET(::esw::PAverage, _impl_.upload_),
    PROTOBUF_FIELD_OFFSET(::esw::PAverage, _impl_.ping_),
    PROTOBUF_FIELD_OFFSET(::esw::PResponseTuple, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::esw::PResponseTuple, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::esw::PResponseTuple, _impl_.measurementinfo_),
    PROTOBUF_FIELD_OFFSET(::esw::PResponseTuple, _impl_.average_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::esw::PMeasurementsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::esw::PMeasurementsResponse, _impl_.responsetuple_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::esw::PMeasurementInfo)},
        {11, -1, -1, sizeof(::esw::PRecords)},
        {22, 32, -1, sizeof(::esw::PRequestTuple)},
        {34, -1, -1, sizeof(::esw::PMeasurementsRequest)},
        {43, -1, -1, sizeof(::esw::PAverage)},
        {54, 64, -1, sizeof(::esw::PResponseTuple)},
        {66, -1, -1, sizeof(::esw::PMeasurementsResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::esw::_PMeasurementInfo_default_instance_._instance,
    &::esw::_PRecords_default_instance_._instance,
    &::esw::_PRequestTuple_default_instance_._instance,
    &::esw::_PMeasurementsRequest_default_instance_._instance,
    &::esw::_PAverage_default_instance_._instance,
    &::esw::_PResponseTuple_default_instance_._instance,
    &::esw::_PMeasurementsResponse_default_instance_._instance,
};
const char descriptor_table_protodef_measurements_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\022measurements.proto\022\003esw\"G\n\020PMeasuremen"
    "tInfo\022\n\n\002id\030\001 \001(\005\022\021\n\ttimestamp\030\002 \001(\003\022\024\n\014"
    "measurerName\030\003 \001(\t\":\n\010PRecords\022\020\n\010Downlo"
    "ad\030\001 \003(\001\022\016\n\006Upload\030\002 \003(\001\022\014\n\004Ping\030\003 \003(\001\"_"
    "\n\rPRequestTuple\022.\n\017measurementInfo\030\001 \001(\013"
    "2\025.esw.PMeasurementInfo\022\036\n\007records\030\002 \001(\013"
    "2\r.esw.PRecords\"@\n\024PMeasurementsRequest\022"
    "(\n\014requestTuple\030\001 \003(\0132\022.esw.PRequestTupl"
    "e\":\n\010PAverage\022\020\n\010Download\030\001 \001(\001\022\016\n\006Uploa"
    "d\030\002 \001(\001\022\014\n\004Ping\030\003 \001(\001\"`\n\016PResponseTuple\022"
    ".\n\017measurementInfo\030\001 \001(\0132\025.esw.PMeasurem"
    "entInfo\022\036\n\007average\030\002 \001(\0132\r.esw.PAverage\""
    "C\n\025PMeasurementsResponse\022*\n\rresponseTupl"
    "e\030\001 \003(\0132\023.esw.PResponseTupleB\036\n\032cz.esw.s"
    "erialization.protoP\001b\006proto3"
};
static ::absl::once_flag descriptor_table_measurements_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_measurements_2eproto = {
    false,
    false,
    588,
    descriptor_table_protodef_measurements_2eproto,
    "measurements.proto",
    &descriptor_table_measurements_2eproto_once,
    nullptr,
    0,
    7,
    schemas,
    file_default_instances,
    TableStruct_measurements_2eproto::offsets,
    file_level_metadata_measurements_2eproto,
    file_level_enum_descriptors_measurements_2eproto,
    file_level_service_descriptors_measurements_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_measurements_2eproto_getter() {
  return &descriptor_table_measurements_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_measurements_2eproto(&descriptor_table_measurements_2eproto);
namespace esw {
// ===================================================================

class PMeasurementInfo::_Internal {
 public:
};

PMeasurementInfo::PMeasurementInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:esw.PMeasurementInfo)
}
PMeasurementInfo::PMeasurementInfo(const PMeasurementInfo& from) : ::google::protobuf::Message() {
  PMeasurementInfo* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.measurername_){},
      decltype(_impl_.timestamp_){},
      decltype(_impl_.id_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.measurername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.measurername_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_measurername().empty()) {
    _this->_impl_.measurername_.Set(from._internal_measurername(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.id_));

  // @@protoc_insertion_point(copy_constructor:esw.PMeasurementInfo)
}
inline void PMeasurementInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.measurername_){},
      decltype(_impl_.timestamp_){::int64_t{0}},
      decltype(_impl_.id_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.measurername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.measurername_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
PMeasurementInfo::~PMeasurementInfo() {
  // @@protoc_insertion_point(destructor:esw.PMeasurementInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PMeasurementInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.measurername_.Destroy();
}
void PMeasurementInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void PMeasurementInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:esw.PMeasurementInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.measurername_.ClearToEmpty();
  ::memset(&_impl_.timestamp_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.id_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.id_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PMeasurementInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 41, 2> PMeasurementInfo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_PMeasurementInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PMeasurementInfo, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(PMeasurementInfo, _impl_.id_)}},
    // int64 timestamp = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(PMeasurementInfo, _impl_.timestamp_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(PMeasurementInfo, _impl_.timestamp_)}},
    // string measurerName = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(PMeasurementInfo, _impl_.measurername_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(PMeasurementInfo, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int64 timestamp = 2;
    {PROTOBUF_FIELD_OFFSET(PMeasurementInfo, _impl_.timestamp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string measurerName = 3;
    {PROTOBUF_FIELD_OFFSET(PMeasurementInfo, _impl_.measurername_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\24\0\0\14\0\0\0\0"
    "esw.PMeasurementInfo"
    "measurerName"
  }},
};

::uint8_t* PMeasurementInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esw.PMeasurementInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_timestamp(), target);
  }

  // string measurerName = 3;
  if (!this->_internal_measurername().empty()) {
    const std::string& _s = this->_internal_measurername();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "esw.PMeasurementInfo.measurerName");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esw.PMeasurementInfo)
  return target;
}

::size_t PMeasurementInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esw.PMeasurementInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string measurerName = 3;
  if (!this->_internal_measurername().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_measurername());
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_timestamp());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData PMeasurementInfo::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    PMeasurementInfo::MergeImpl
};
const ::google::protobuf::Message::ClassData*PMeasurementInfo::GetClassData() const { return &_class_data_; }


void PMeasurementInfo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<PMeasurementInfo*>(&to_msg);
  auto& from = static_cast<const PMeasurementInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:esw.PMeasurementInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_measurername().empty()) {
    _this->_internal_set_measurername(from._internal_measurername());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PMeasurementInfo::CopyFrom(const PMeasurementInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esw.PMeasurementInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PMeasurementInfo::IsInitialized() const {
  return true;
}

void PMeasurementInfo::InternalSwap(PMeasurementInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.measurername_, lhs_arena,
                                       &other->_impl_.measurername_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PMeasurementInfo, _impl_.id_)
      + sizeof(PMeasurementInfo::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(PMeasurementInfo, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::google::protobuf::Metadata PMeasurementInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_measurements_2eproto_getter, &descriptor_table_measurements_2eproto_once,
      file_level_metadata_measurements_2eproto[0]);
}
// ===================================================================

class PRecords::_Internal {
 public:
};

PRecords::PRecords(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:esw.PRecords)
}
PRecords::PRecords(const PRecords& from) : ::google::protobuf::Message() {
  PRecords* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.download_){from._impl_.download_},
      decltype(_impl_.upload_){from._impl_.upload_},
      decltype(_impl_.ping_){from._impl_.ping_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:esw.PRecords)
}
inline void PRecords::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.download_){arena},
      decltype(_impl_.upload_){arena},
      decltype(_impl_.ping_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
PRecords::~PRecords() {
  // @@protoc_insertion_point(destructor:esw.PRecords)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PRecords::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.download_.~RepeatedField();
  _impl_.upload_.~RepeatedField();
  _impl_.ping_.~RepeatedField();
}
void PRecords::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void PRecords::Clear() {
// @@protoc_insertion_point(message_clear_start:esw.PRecords)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_download()->Clear();
  _internal_mutable_upload()->Clear();
  _internal_mutable_ping()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PRecords::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> PRecords::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_PRecords_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated double Download = 1;
    {::_pbi::TcParser::FastF64P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(PRecords, _impl_.download_)}},
    // repeated double Upload = 2;
    {::_pbi::TcParser::FastF64P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(PRecords, _impl_.upload_)}},
    // repeated double Ping = 3;
    {::_pbi::TcParser::FastF64P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(PRecords, _impl_.ping_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated double Download = 1;
    {PROTOBUF_FIELD_OFFSET(PRecords, _impl_.download_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
    // repeated double Upload = 2;
    {PROTOBUF_FIELD_OFFSET(PRecords, _impl_.upload_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
    // repeated double Ping = 3;
    {PROTOBUF_FIELD_OFFSET(PRecords, _impl_.ping_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* PRecords::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esw.PRecords)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated double Download = 1;
  if (this->_internal_download_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_download(), target);
  }

  // repeated double Upload = 2;
  if (this->_internal_upload_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_upload(), target);
  }

  // repeated double Ping = 3;
  if (this->_internal_ping_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_ping(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esw.PRecords)
  return target;
}

::size_t PRecords::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esw.PRecords)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double Download = 1;
  {
    std::size_t data_size = std::size_t{8} *
        ::_pbi::FromIntSize(this->_internal_download_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated double Upload = 2;
  {
    std::size_t data_size = std::size_t{8} *
        ::_pbi::FromIntSize(this->_internal_upload_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated double Ping = 3;
  {
    std::size_t data_size = std::size_t{8} *
        ::_pbi::FromIntSize(this->_internal_ping_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData PRecords::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    PRecords::MergeImpl
};
const ::google::protobuf::Message::ClassData*PRecords::GetClassData() const { return &_class_data_; }


void PRecords::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<PRecords*>(&to_msg);
  auto& from = static_cast<const PRecords&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:esw.PRecords)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_download()->MergeFrom(from._internal_download());
  _this->_internal_mutable_upload()->MergeFrom(from._internal_upload());
  _this->_internal_mutable_ping()->MergeFrom(from._internal_ping());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PRecords::CopyFrom(const PRecords& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esw.PRecords)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PRecords::IsInitialized() const {
  return true;
}

void PRecords::InternalSwap(PRecords* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.download_.InternalSwap(&other->_impl_.download_);
  _impl_.upload_.InternalSwap(&other->_impl_.upload_);
  _impl_.ping_.InternalSwap(&other->_impl_.ping_);
}

::google::protobuf::Metadata PRecords::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_measurements_2eproto_getter, &descriptor_table_measurements_2eproto_once,
      file_level_metadata_measurements_2eproto[1]);
}
// ===================================================================

class PRequestTuple::_Internal {
 public:
  using HasBits = decltype(std::declval<PRequestTuple>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PRequestTuple, _impl_._has_bits_);
  static const ::esw::PMeasurementInfo& measurementinfo(const PRequestTuple* msg);
  static void set_has_measurementinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::esw::PRecords& records(const PRequestTuple* msg);
  static void set_has_records(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::esw::PMeasurementInfo& PRequestTuple::_Internal::measurementinfo(const PRequestTuple* msg) {
  return *msg->_impl_.measurementinfo_;
}
const ::esw::PRecords& PRequestTuple::_Internal::records(const PRequestTuple* msg) {
  return *msg->_impl_.records_;
}
PRequestTuple::PRequestTuple(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:esw.PRequestTuple)
}
PRequestTuple::PRequestTuple(const PRequestTuple& from) : ::google::protobuf::Message() {
  PRequestTuple* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.measurementinfo_){nullptr},
      decltype(_impl_.records_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.measurementinfo_ = new ::esw::PMeasurementInfo(*from._impl_.measurementinfo_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.records_ = new ::esw::PRecords(*from._impl_.records_);
  }

  // @@protoc_insertion_point(copy_constructor:esw.PRequestTuple)
}
inline void PRequestTuple::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.measurementinfo_){nullptr},
      decltype(_impl_.records_){nullptr},
  };
}
PRequestTuple::~PRequestTuple() {
  // @@protoc_insertion_point(destructor:esw.PRequestTuple)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PRequestTuple::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.measurementinfo_;
  if (this != internal_default_instance()) delete _impl_.records_;
}
void PRequestTuple::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void PRequestTuple::Clear() {
// @@protoc_insertion_point(message_clear_start:esw.PRequestTuple)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.measurementinfo_ != nullptr);
      _impl_.measurementinfo_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.records_ != nullptr);
      _impl_.records_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PRequestTuple::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> PRequestTuple::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PRequestTuple, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_PRequestTuple_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .esw.PRecords records = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(PRequestTuple, _impl_.records_)}},
    // .esw.PMeasurementInfo measurementInfo = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PRequestTuple, _impl_.measurementinfo_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .esw.PMeasurementInfo measurementInfo = 1;
    {PROTOBUF_FIELD_OFFSET(PRequestTuple, _impl_.measurementinfo_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .esw.PRecords records = 2;
    {PROTOBUF_FIELD_OFFSET(PRequestTuple, _impl_.records_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::esw::PMeasurementInfo>()},
    {::_pbi::TcParser::GetTable<::esw::PRecords>()},
  }}, {{
  }},
};

::uint8_t* PRequestTuple::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esw.PRequestTuple)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .esw.PMeasurementInfo measurementInfo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::measurementinfo(this),
        _Internal::measurementinfo(this).GetCachedSize(), target, stream);
  }

  // .esw.PRecords records = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::records(this),
        _Internal::records(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esw.PRequestTuple)
  return target;
}

::size_t PRequestTuple::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esw.PRequestTuple)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .esw.PMeasurementInfo measurementInfo = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.measurementinfo_);
    }

    // .esw.PRecords records = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.records_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData PRequestTuple::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    PRequestTuple::MergeImpl
};
const ::google::protobuf::Message::ClassData*PRequestTuple::GetClassData() const { return &_class_data_; }


void PRequestTuple::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<PRequestTuple*>(&to_msg);
  auto& from = static_cast<const PRequestTuple&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:esw.PRequestTuple)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_measurementinfo()->::esw::PMeasurementInfo::MergeFrom(
          from._internal_measurementinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_records()->::esw::PRecords::MergeFrom(
          from._internal_records());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PRequestTuple::CopyFrom(const PRequestTuple& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esw.PRequestTuple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PRequestTuple::IsInitialized() const {
  return true;
}

void PRequestTuple::InternalSwap(PRequestTuple* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PRequestTuple, _impl_.records_)
      + sizeof(PRequestTuple::_impl_.records_)
      - PROTOBUF_FIELD_OFFSET(PRequestTuple, _impl_.measurementinfo_)>(
          reinterpret_cast<char*>(&_impl_.measurementinfo_),
          reinterpret_cast<char*>(&other->_impl_.measurementinfo_));
}

::google::protobuf::Metadata PRequestTuple::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_measurements_2eproto_getter, &descriptor_table_measurements_2eproto_once,
      file_level_metadata_measurements_2eproto[2]);
}
// ===================================================================

class PMeasurementsRequest::_Internal {
 public:
};

PMeasurementsRequest::PMeasurementsRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:esw.PMeasurementsRequest)
}
PMeasurementsRequest::PMeasurementsRequest(const PMeasurementsRequest& from) : ::google::protobuf::Message() {
  PMeasurementsRequest* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.requesttuple_){from._impl_.requesttuple_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:esw.PMeasurementsRequest)
}
inline void PMeasurementsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.requesttuple_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
PMeasurementsRequest::~PMeasurementsRequest() {
  // @@protoc_insertion_point(destructor:esw.PMeasurementsRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PMeasurementsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.requesttuple_.~RepeatedPtrField();
}
void PMeasurementsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void PMeasurementsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:esw.PMeasurementsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_requesttuple()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PMeasurementsRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PMeasurementsRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_PMeasurementsRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .esw.PRequestTuple requestTuple = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(PMeasurementsRequest, _impl_.requesttuple_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .esw.PRequestTuple requestTuple = 1;
    {PROTOBUF_FIELD_OFFSET(PMeasurementsRequest, _impl_.requesttuple_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::esw::PRequestTuple>()},
  }}, {{
  }},
};

::uint8_t* PMeasurementsRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esw.PMeasurementsRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .esw.PRequestTuple requestTuple = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_requesttuple_size()); i < n; i++) {
    const auto& repfield = this->_internal_requesttuple().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esw.PMeasurementsRequest)
  return target;
}

::size_t PMeasurementsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esw.PMeasurementsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .esw.PRequestTuple requestTuple = 1;
  total_size += 1UL * this->_internal_requesttuple_size();
  for (const auto& msg : this->_internal_requesttuple()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData PMeasurementsRequest::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    PMeasurementsRequest::MergeImpl
};
const ::google::protobuf::Message::ClassData*PMeasurementsRequest::GetClassData() const { return &_class_data_; }


void PMeasurementsRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<PMeasurementsRequest*>(&to_msg);
  auto& from = static_cast<const PMeasurementsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:esw.PMeasurementsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_requesttuple()->MergeFrom(from._internal_requesttuple());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PMeasurementsRequest::CopyFrom(const PMeasurementsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esw.PMeasurementsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PMeasurementsRequest::IsInitialized() const {
  return true;
}

void PMeasurementsRequest::InternalSwap(PMeasurementsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.requesttuple_.InternalSwap(&other->_impl_.requesttuple_);
}

::google::protobuf::Metadata PMeasurementsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_measurements_2eproto_getter, &descriptor_table_measurements_2eproto_once,
      file_level_metadata_measurements_2eproto[3]);
}
// ===================================================================

class PAverage::_Internal {
 public:
};

PAverage::PAverage(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:esw.PAverage)
}
PAverage::PAverage(const PAverage& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:esw.PAverage)
}
inline void PAverage::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.download_){0},
      decltype(_impl_.upload_){0},
      decltype(_impl_.ping_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
PAverage::~PAverage() {
  // @@protoc_insertion_point(destructor:esw.PAverage)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PAverage::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void PAverage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void PAverage::Clear() {
// @@protoc_insertion_point(message_clear_start:esw.PAverage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.download_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.ping_) -
      reinterpret_cast<char*>(&_impl_.download_)) + sizeof(_impl_.ping_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PAverage::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> PAverage::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_PAverage_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // double Download = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(PAverage, _impl_.download_)}},
    // double Upload = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(PAverage, _impl_.upload_)}},
    // double Ping = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(PAverage, _impl_.ping_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double Download = 1;
    {PROTOBUF_FIELD_OFFSET(PAverage, _impl_.download_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double Upload = 2;
    {PROTOBUF_FIELD_OFFSET(PAverage, _impl_.upload_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double Ping = 3;
    {PROTOBUF_FIELD_OFFSET(PAverage, _impl_.ping_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* PAverage::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esw.PAverage)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double Download = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_download = this->_internal_download();
  ::uint64_t raw_download;
  memcpy(&raw_download, &tmp_download, sizeof(tmp_download));
  if (raw_download != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_download(), target);
  }

  // double Upload = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_upload = this->_internal_upload();
  ::uint64_t raw_upload;
  memcpy(&raw_upload, &tmp_upload, sizeof(tmp_upload));
  if (raw_upload != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_upload(), target);
  }

  // double Ping = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_ping = this->_internal_ping();
  ::uint64_t raw_ping;
  memcpy(&raw_ping, &tmp_ping, sizeof(tmp_ping));
  if (raw_ping != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_ping(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esw.PAverage)
  return target;
}

::size_t PAverage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esw.PAverage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double Download = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_download = this->_internal_download();
  ::uint64_t raw_download;
  memcpy(&raw_download, &tmp_download, sizeof(tmp_download));
  if (raw_download != 0) {
    total_size += 9;
  }

  // double Upload = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_upload = this->_internal_upload();
  ::uint64_t raw_upload;
  memcpy(&raw_upload, &tmp_upload, sizeof(tmp_upload));
  if (raw_upload != 0) {
    total_size += 9;
  }

  // double Ping = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_ping = this->_internal_ping();
  ::uint64_t raw_ping;
  memcpy(&raw_ping, &tmp_ping, sizeof(tmp_ping));
  if (raw_ping != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData PAverage::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    PAverage::MergeImpl
};
const ::google::protobuf::Message::ClassData*PAverage::GetClassData() const { return &_class_data_; }


void PAverage::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<PAverage*>(&to_msg);
  auto& from = static_cast<const PAverage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:esw.PAverage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_download = from._internal_download();
  ::uint64_t raw_download;
  memcpy(&raw_download, &tmp_download, sizeof(tmp_download));
  if (raw_download != 0) {
    _this->_internal_set_download(from._internal_download());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_upload = from._internal_upload();
  ::uint64_t raw_upload;
  memcpy(&raw_upload, &tmp_upload, sizeof(tmp_upload));
  if (raw_upload != 0) {
    _this->_internal_set_upload(from._internal_upload());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_ping = from._internal_ping();
  ::uint64_t raw_ping;
  memcpy(&raw_ping, &tmp_ping, sizeof(tmp_ping));
  if (raw_ping != 0) {
    _this->_internal_set_ping(from._internal_ping());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PAverage::CopyFrom(const PAverage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esw.PAverage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PAverage::IsInitialized() const {
  return true;
}

void PAverage::InternalSwap(PAverage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PAverage, _impl_.ping_)
      + sizeof(PAverage::_impl_.ping_)
      - PROTOBUF_FIELD_OFFSET(PAverage, _impl_.download_)>(
          reinterpret_cast<char*>(&_impl_.download_),
          reinterpret_cast<char*>(&other->_impl_.download_));
}

::google::protobuf::Metadata PAverage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_measurements_2eproto_getter, &descriptor_table_measurements_2eproto_once,
      file_level_metadata_measurements_2eproto[4]);
}
// ===================================================================

class PResponseTuple::_Internal {
 public:
  using HasBits = decltype(std::declval<PResponseTuple>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PResponseTuple, _impl_._has_bits_);
  static const ::esw::PMeasurementInfo& measurementinfo(const PResponseTuple* msg);
  static void set_has_measurementinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::esw::PAverage& average(const PResponseTuple* msg);
  static void set_has_average(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::esw::PMeasurementInfo& PResponseTuple::_Internal::measurementinfo(const PResponseTuple* msg) {
  return *msg->_impl_.measurementinfo_;
}
const ::esw::PAverage& PResponseTuple::_Internal::average(const PResponseTuple* msg) {
  return *msg->_impl_.average_;
}
PResponseTuple::PResponseTuple(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:esw.PResponseTuple)
}
PResponseTuple::PResponseTuple(const PResponseTuple& from) : ::google::protobuf::Message() {
  PResponseTuple* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.measurementinfo_){nullptr},
      decltype(_impl_.average_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.measurementinfo_ = new ::esw::PMeasurementInfo(*from._impl_.measurementinfo_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.average_ = new ::esw::PAverage(*from._impl_.average_);
  }

  // @@protoc_insertion_point(copy_constructor:esw.PResponseTuple)
}
inline void PResponseTuple::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.measurementinfo_){nullptr},
      decltype(_impl_.average_){nullptr},
  };
}
PResponseTuple::~PResponseTuple() {
  // @@protoc_insertion_point(destructor:esw.PResponseTuple)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PResponseTuple::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.measurementinfo_;
  if (this != internal_default_instance()) delete _impl_.average_;
}
void PResponseTuple::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void PResponseTuple::Clear() {
// @@protoc_insertion_point(message_clear_start:esw.PResponseTuple)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.measurementinfo_ != nullptr);
      _impl_.measurementinfo_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.average_ != nullptr);
      _impl_.average_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PResponseTuple::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> PResponseTuple::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PResponseTuple, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_PResponseTuple_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .esw.PAverage average = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(PResponseTuple, _impl_.average_)}},
    // .esw.PMeasurementInfo measurementInfo = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PResponseTuple, _impl_.measurementinfo_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .esw.PMeasurementInfo measurementInfo = 1;
    {PROTOBUF_FIELD_OFFSET(PResponseTuple, _impl_.measurementinfo_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .esw.PAverage average = 2;
    {PROTOBUF_FIELD_OFFSET(PResponseTuple, _impl_.average_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::esw::PMeasurementInfo>()},
    {::_pbi::TcParser::GetTable<::esw::PAverage>()},
  }}, {{
  }},
};

::uint8_t* PResponseTuple::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esw.PResponseTuple)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .esw.PMeasurementInfo measurementInfo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::measurementinfo(this),
        _Internal::measurementinfo(this).GetCachedSize(), target, stream);
  }

  // .esw.PAverage average = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::average(this),
        _Internal::average(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esw.PResponseTuple)
  return target;
}

::size_t PResponseTuple::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esw.PResponseTuple)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .esw.PMeasurementInfo measurementInfo = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.measurementinfo_);
    }

    // .esw.PAverage average = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.average_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData PResponseTuple::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    PResponseTuple::MergeImpl
};
const ::google::protobuf::Message::ClassData*PResponseTuple::GetClassData() const { return &_class_data_; }


void PResponseTuple::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<PResponseTuple*>(&to_msg);
  auto& from = static_cast<const PResponseTuple&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:esw.PResponseTuple)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_measurementinfo()->::esw::PMeasurementInfo::MergeFrom(
          from._internal_measurementinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_average()->::esw::PAverage::MergeFrom(
          from._internal_average());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PResponseTuple::CopyFrom(const PResponseTuple& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esw.PResponseTuple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PResponseTuple::IsInitialized() const {
  return true;
}

void PResponseTuple::InternalSwap(PResponseTuple* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PResponseTuple, _impl_.average_)
      + sizeof(PResponseTuple::_impl_.average_)
      - PROTOBUF_FIELD_OFFSET(PResponseTuple, _impl_.measurementinfo_)>(
          reinterpret_cast<char*>(&_impl_.measurementinfo_),
          reinterpret_cast<char*>(&other->_impl_.measurementinfo_));
}

::google::protobuf::Metadata PResponseTuple::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_measurements_2eproto_getter, &descriptor_table_measurements_2eproto_once,
      file_level_metadata_measurements_2eproto[5]);
}
// ===================================================================

class PMeasurementsResponse::_Internal {
 public:
};

PMeasurementsResponse::PMeasurementsResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:esw.PMeasurementsResponse)
}
PMeasurementsResponse::PMeasurementsResponse(const PMeasurementsResponse& from) : ::google::protobuf::Message() {
  PMeasurementsResponse* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.responsetuple_){from._impl_.responsetuple_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:esw.PMeasurementsResponse)
}
inline void PMeasurementsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.responsetuple_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
PMeasurementsResponse::~PMeasurementsResponse() {
  // @@protoc_insertion_point(destructor:esw.PMeasurementsResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PMeasurementsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.responsetuple_.~RepeatedPtrField();
}
void PMeasurementsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void PMeasurementsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:esw.PMeasurementsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_responsetuple()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PMeasurementsResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PMeasurementsResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_PMeasurementsResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .esw.PResponseTuple responseTuple = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(PMeasurementsResponse, _impl_.responsetuple_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .esw.PResponseTuple responseTuple = 1;
    {PROTOBUF_FIELD_OFFSET(PMeasurementsResponse, _impl_.responsetuple_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::esw::PResponseTuple>()},
  }}, {{
  }},
};

::uint8_t* PMeasurementsResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esw.PMeasurementsResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .esw.PResponseTuple responseTuple = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_responsetuple_size()); i < n; i++) {
    const auto& repfield = this->_internal_responsetuple().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esw.PMeasurementsResponse)
  return target;
}

::size_t PMeasurementsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esw.PMeasurementsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .esw.PResponseTuple responseTuple = 1;
  total_size += 1UL * this->_internal_responsetuple_size();
  for (const auto& msg : this->_internal_responsetuple()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData PMeasurementsResponse::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    PMeasurementsResponse::MergeImpl
};
const ::google::protobuf::Message::ClassData*PMeasurementsResponse::GetClassData() const { return &_class_data_; }


void PMeasurementsResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<PMeasurementsResponse*>(&to_msg);
  auto& from = static_cast<const PMeasurementsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:esw.PMeasurementsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_responsetuple()->MergeFrom(from._internal_responsetuple());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PMeasurementsResponse::CopyFrom(const PMeasurementsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esw.PMeasurementsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PMeasurementsResponse::IsInitialized() const {
  return true;
}

void PMeasurementsResponse::InternalSwap(PMeasurementsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.responsetuple_.InternalSwap(&other->_impl_.responsetuple_);
}

::google::protobuf::Metadata PMeasurementsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_measurements_2eproto_getter, &descriptor_table_measurements_2eproto_once,
      file_level_metadata_measurements_2eproto[6]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace esw
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
